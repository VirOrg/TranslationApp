import groovy.json.JsonSlurper
import groovy.xml.MarkupBuilder

def BASE_URL = "https://demo4108721.mockable.io/translation/"
def SUPPORTED_LANGUAGES = "suppourtedlanguages"
def DEFAULT_LANG = "en"
final RES_FILENAME = "strings-autogenerated.xml"

def fetchJson(url) {
    return new JsonSlurper().parse(new URL(url))
}

def convertXML(url) {
    new JsonSlurper().parse(new URL(url)).with { j ->
        new StringWriter().with { sw ->
            new MarkupBuilder(sw)."resources" {
                j.translation.each { data ->
                    string(name: data.key, data.value)
                }
            }
            sw.toString()
        }
    }
}


def dumpTranslationLocally(translation, targetPath) {
    def log = project.logger
    InputStream stream = new ByteArrayInputStream(translation.getBytes('UTF-8'))
    def output = new File(targetPath)
    def isCreated = output.parentFile.mkdirs()
    log.quiet("file create check : " + isCreated +" "+ targetPath)


    stream.withStream {
        is -> output.withOutputStream {
            os -> os << is
        }
    }
}

def dumpTranslationVersion(url, targetPath) {
    def log = project.logger

    log.quiet("Version Url : " + url)

    def output = new File(targetPath)
    output.parentFile.mkdirs()

    log.quiet("Version Resource Path : " + targetPath)
    URLConnection urlConnection = new URL(url).openConnection()
    urlConnection.inputStream.withStream{
        is -> output.withOutputStream { os -> os << is }
    }
}
def updateDefaultTranslation(baseUrl, targetFileName){
    def log = project.logger
    def langUrl = "${baseUrl}en"
    log.quiet("Language URL : " + langUrl)

    def resPath = "${project.projectDir.absolutePath}/app/src/main/res/values"
    log.quiet("Resource Path : " + resPath)

    def stringFile = "${resPath}/${targetFileName}"
    def translation = convertXML(langUrl)
    log.quiet("json Translation : " + translation.toString())

    dumpTranslationLocally(translation, stringFile)
}

def updateTranslationVersion(baseUrl){
    def log = project.logger
    def versionUrl = "${baseUrl}version"
    log.quiet("Version URL : " + versionUrl)
    def resPath = "${project.projectDir.absoluteFile}/app/src/main/res/raw/translation_version.json"
    log.quiet("Version Resource Path : " + resPath)
    dumpTranslationVersion(versionUrl,resPath)
}
task(updateTranslations) {
    def log = project.logger
    group = "Translate"
    def languages = fetchJson("${BASE_URL}${SUPPORTED_LANGUAGES}")
    log.quiet("LANGUAGES : " + languages)
    updateTranslationVersion(BASE_URL)
    updateDefaultTranslation(BASE_URL,RES_FILENAME)


    languages.each { lang ->
        def langUrl = "${BASE_URL}${lang.code}"
        log.quiet("Language URL : " + langUrl)

        def resPath = "${project.projectDir.absolutePath}/app/src/main/res/values-${lang.code}"
        log.quiet("Resource Path : " + resPath)

        def stringFile = "${resPath}/${RES_FILENAME}"
        def translation = convertXML(langUrl)
        log.quiet("json Translation : " + translation.toString())

        dumpTranslationLocally(translation, stringFile)

    }
}

